
/*
//----------------------------------------------------
// VARIABLES

    let notes=[];
    let holder=document.getElementById("noteTrack01");
    let noteTrack;
    let noteEditor;
    let controller;

    let playingNote=-1;
    let nextNote=-1;
    let pendingOctave=-1;    
    let pendingNote=-1;
    let pendingNoteDuration=0;
    let editNoteNum=-1;

    let monoSynth=true;
    let BPM=90;
    let beatInterval=60/BPM*1000;
    let noteDuration=10;

    let isPlaying=false;
    let nextBeatTime=-1;
    let prevBeatTime=-1;
    let beatNum=0;
    let outputNum=0;
    let activeNotes=[];

    let updateInterval;

//----------------------------------------------------
// INIT

    document.addEventListener("DOMContentLoaded", init, false);

    function init() {

        if(window.localStorage.getItem("notes")) notes=JSON.parse(window.localStorage.getItem("notes"));
        if(window.localStorage.getItem("BPM")) BPM=window.localStorage.getItem("BPM");
        beatInterval=60/BPM*1000;

        console.log(notes);

    // create UI ---

        createController();
        createNoteEditor();
        createNotes();

    }

//----------------------------------------------------
// EVENTS

    function update() {

        let time=window.performance.now();

        if(isPlaying) {

            let note=notes[beatNum];
            let noteWasPlayed=false;
            let MIDINote= note.hasOwnProperty("MIDINote") ? note.MIDINote : -1 ;
            let noteDuration= note.hasOwnProperty("duration") ? note.duration : 0 ;

            if(nextBeatTime==-1) {
                
                nextBeatTime=time+beatInterval;
                playNote(MIDINote, nextBeatTime, noteDuration);
                noteWasPlayed=true;

            } else {
  
                let dif=nextBeatTime-time;
                if(dif<=0) {

                    nextBeatTime=time+beatInterval+dif;
                    playNote(MIDINote, nextBeatTime, noteDuration);
                    noteWasPlayed=true;

                    prevBeatTime=time;

                }

            }

            if(noteWasPlayed) {

                let n=beatNum-1;
                if(n<0) n=notes.length-1;
                for(var i=0; i<notes.length; i++) notes[i].elem.className=notes[i].elem.className.replace(" active", "");
                notes[n].elem.className+=" active";                    

                beatNum++;
                if(beatNum>=notes.length) beatNum=0;                    

            }

        } else {
        nextBeatTime=-1;
        }

    }

//----------------------------------------------------
// FUNCTIONS

    function createNotes() {

        let div;

        if(noteTrack!=null) {
        
            noteTrack.innerHTML="";
            div=noteTrack;

        } else {

            div=document.createElement("div");
            div.className="noteTrack";        
            holder.appendChild(div);
            noteTrack=div;

        }

        let note;
        for(let i=0; i<notes.length; i++) {

            let oct= notes[i].octave>-1 ? notes[i].octave : "" ;
            let noteName=getNoteName(notes[i].note);

            note=document.createElement("span");
            note.innerHTML=oct+""+noteName;
            
            note.className="note";
            if(isPlaying && i==beatNum) note.className+=" active";
            if(i==editNoteNum) note.className+=" selected";

            note.addEventListener("click", (e) => { editNote(e, i) });
            div.appendChild(note);

            notes[i].elem=note;

        }

    }

//------------

    function createNoteEditor() {

        let div;

        if(noteEditor!=null) {
            
            noteEditor.innerHTML="";
            div=noteEditor;

        } else {

            div=document.createElement("div");
            holder.appendChild(div);
            noteEditor=div;

        }

        let but;

        but=document.createElement("span");
        but.innerHTML= pendingOctave>-1 ? pendingOctave : "-" ;
        but.addEventListener("wheel", (e) => { scrollOctave(e) });
        div.appendChild(but);

        but=document.createElement("span");
        but.innerHTML= pendingNote>-1 ? getNoteName(pendingNote) : "-" ;
        but.addEventListener("wheel", (e) => { scrollNote(e) });
        div.appendChild(but);

        but=document.createElement("span");
        but.innerHTML= pendingNoteDuration>=window.minNoteDuration ? pendingNoteDuration : "-" ;
        but.addEventListener("wheel", (e) => { scrollNoteDuration(e) });
        div.appendChild(but);

        but=document.createElement("span");
        but.addEventListener("click", (e) => { clearNote(e) });
        but.innerHTML="[]";
        div.appendChild(but);

        but=document.createElement("span");
        but.addEventListener("click", (e) => { addNote(e) });
        but.innerHTML="+";
        div.appendChild(but);

        but=document.createElement("span");
        but.innerHTML="x";
        but.addEventListener("click", (e) => { removeNote(e) });
        div.appendChild(but);

    }

//------------

    function createController() {

        let div;

        if(controller!=null) {

            div=controller;
            controller.innerHTML="";

        } else {

            div=document.createElement("div");
            controller=div;
            holder.appendChild(div);        

        }

        let but;
        
        but=document.createElement("span");
        but.innerHTML="<<";
        but.addEventListener("click", (e) => { rewind(e) });
        div.appendChild(but);

        but=document.createElement("span");
        but.innerHTML= isPlaying ? "||" : ">" ;
        but.addEventListener("click", (e) => { togglePlaying(e) });
        div.appendChild(but);

        but=document.createElement("span");
        but.innerHTML=BPM;
        but.addEventListener("wheel", (e) => { scrollBPM(e) });
        div.appendChild(but);           

        but=document.createElement("span");
        but.innerHTML=outputNum;
        but.addEventListener("wheel", (e) => { scrollOutputNum(e) });
        div.appendChild(but);           

    }

//------------

    function editNote(event, num) {

        editNoteNum=num;
        let note=notes[num];

        pendingOctave= note.hasOwnProperty("octave") ? note.octave : -1 ;
        pendingNote= note.hasOwnProperty("note") ? note.note : -1 ;
        pendingNoteDuration= note.hasOwnProperty("duration") ? note.duration : 0 ;

        for(let i=0; i<notes.length; i++) notes[i].elem.className=notes[i].elem.className.replace(" selected", "");
        notes[num].elem.className+=" selected";

        createNoteEditor();

    }

//------------

    function clearNote(event) {

        let num=editNoteNum;
        
        if(num>-1) {
        
            notes[num].octave=-1;
            notes[num].note=-1;
            notes[num].MIDINote=-1;
            notes[num].duration=0;

        } else {

            pendingOctave=-1;
            pendingNote=-1;

        }

        createNoteEditor();
        if(num>-1) createNotes();
        window.localStorage.setItem("notes", JSON.stringify(notes));

    }

//------------

    function addNote(event) {

        let obj={};
        obj.octave=pendingOctave;
        obj.note=pendingNote;
        obj.duration=pendingNoteDuration;
        obj.MIDINote=getMIDINote(pendingOctave, pendingNote);
        notes.push(obj);

        editNoteNum=-1;
        createNotes();
        window.localStorage.setItem("notes", JSON.stringify(notes));

    }

//------------

    function removeNote(event) {

        if(editNoteNum<0) return;
        notes.splice(editNoteNum, 1);
        editNoteNum=-1;
        createNotes();
        window.localStorage.setItem("notes", JSON.stringify(notes));

    }

//------------

    function scrollOctave(event) {

        let d=Math.sign(event.deltaY);
        pendingOctave-=d;
        if(pendingOctave<0) pendingOctave+=11;
        if(pendingOctave>10) pendingOctave-=11;
        createNoteEditor();

        if(editNoteNum>-1) {
        
            notes[editNoteNum].octave=pendingOctave;
            notes[editNoteNum].MIDINote=getMIDINote(notes[editNoteNum].octave, notes[editNoteNum].note);
            createNotes();
            window.localStorage.setItem("notes", JSON.stringify(notes));

        }

    }

//------------

    function scrollNote(event) {

        let d=Math.sign(event.deltaY);
        pendingNote-=d;
        if(pendingNote<0) pendingNote+=12;
        if(pendingNote>11) pendingNote-=12;
        if(pendingOctave>9 && pendingNote>7) pendingNote-=8;
        createNoteEditor();
        
        if(editNoteNum>-1) {
        
            notes[editNoteNum].note=pendingNote;
            notes[editNoteNum].MIDINote=getMIDINote(notes[editNoteNum].octave, notes[editNoteNum].note);
            createNotes();

            window.localStorage.setItem("notes", JSON.stringify(notes));

        }

    }

//------------

    function scrollNoteDuration(event) {

        let d=Math.sign(event.deltaY);
        pendingNoteDuration-=d;
        if(d<0 && pendingNoteDuration<window.minNoteDuration) pendingNoteDuration=window.minNoteDuration;
        if(pendingNoteDuration<window.minNoteDuration) pendingNoteDuration=0;
        createNoteEditor();

        if(editNoteNum>-1) {
        
            notes[editNoteNum].duration=pendingNoteDuration;
            createNotes();

            window.localStorage.setItem("notes", JSON.stringify(notes));
  
        }

    }

//------------

    function scrollBPM(event) {

        let d=Math.sign(event.deltaY);
        BPM-=d;
        if(BPM<1) BPM=1;
        beatInterval=60/BPM*1000;
        createController();        
        window.localStorage.setItem("BPM", BPM);

    }

//------------

    function scrollOutputNum(event) {

        let d=Math.sign(event.deltaY);
        outputNum-=d;
        if(outputNum<0) outputNum+=window.outputs.length;
        if(outputNum>window.outputs.length-1) outputNum-=window.outputs.length;
        createController();        
        window.localStorage.setItem("outputNum", outputNum);

    }

//------------

    function rewind(event) {

        beatNum=0;
        lastBeatTime=-1;

    }

//------------

    function togglePlaying(event) {

        isPlaying=!isPlaying;
        createController();

        if(isPlaying) {
        updateInterval=setInterval(update, 1);
        } else {
        clearInterval(update);
        }

    }

//----------------------------------------------------
// HELPFUL

    function getNoteName(num) {

        switch(num) {

            case 0: return "C"; break;
            case 1: return "C#"; break;
            case 2: return "D"; break;
            case 3: return "D#"; break;
            case 4: return "E"; break;
            case 5: return "F"; break;
            case 6: return "F#"; break;
            case 7: return "G"; break;
            case 8: return "G#"; break;
            case 9: return "A"; break;
            case 10: return "A#"; break;
            case 11: return "B"; break;
            default: return ""; break;

        }

    }

//------------

    function getMIDINote(octave, note) {
    return octave*12+note;
    }

//------------

    function playNote(MIDINote, time=0, duration=0) {

        if(MIDINote<0 || MIDINote>127) return;

        if(time==0) time=window.performance.now();
        //if(monoSynth) stopActiveNotes(time);

        time=Math.floor(time);

        let msg=[0x90, MIDINote, 127];
        window.outputs[outputNum].send(msg, time);

        if(duration>=window.minNoteDuration) {
        msg=[0x80, MIDINote, 0];
        window.outputs[outputNum].send(msg, time+duration);
        }

    }

//------------

    function stopNote(MIDINote, time=0) {

        if(time==0) time=window.performance.now();

        let msg=[0x80, MIDINote, 127];        
        window.outputs[outputNum].send(msg, time);

        for(let i=0; i<activeNotes.length; i++) {
        
            if(MIDINote==activeNotes[i].MIDINote) {
            activeNotes.splice(i, 1);
            break;
            }

        }

    }

//------------

    function stopActiveNotes(time=0) {

        if(time==0) time=window.performance.now();

        for(let i=0; i<activeNotes.length; i++) {
        stopNote(activeNotes[i].MIDINote, time);
        }

    }

//------------

    function stopAllNotes() {

        for(let i=0; i<127; i++) {
        stopNote(i);
        }

    }

*/
